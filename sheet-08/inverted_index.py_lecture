"""
Copyright 2017, University of Freiburg,
Chair of Algorithms and Data Structures.
Author: Hannah Bast <bast@cs.uni-freiburg.de>
"""

import re
import sys
import numpy


class InvertedIndex:
    """ A very simple inverted index. """

    def __init__(self):
        """ Create an empty inverted index. """

        self.inverted_lists = {}
        self.terms = []
        self.num_terms = 0
        self.num_docs = 0

    def read_from_file(self, file_name):
        """ Construct index from given file.

        >>> ii = InvertedIndex()
        >>> ii.read_from_file("example.txt")
        >>> sorted(ii.inverted_lists.items())
        [('doc', [1, 2, 3]), ('first', [1]), ('second', [2]), ('third', [3])]
        >>> (ii.num_terms, ii.num_docs)
        (4, 3)
        >>> ii.terms
        ['first', 'doc', 'second', 'third']
        """

        doc_id = 0
        with open(file_name) as file:
            for line in file:
                doc_id += 1
                for term in re.split("[^a-zA-Z]+", line):
                    if len(term) > 0:
                        term = term.lower()
                        if term not in self.inverted_lists:
                            self.terms.append(term)
                            self.inverted_lists[term] = []
                        # Note that this way, the record ids will be
                        # automaticall in sorted order.
                        self.inverted_lists[term].append(doc_id)
        self.num_terms = len(self.inverted_lists.keys())
        self.num_docs = doc_id

    def build_td_matrix(self):
        """ Build the term-document matrix from the inverted index. """

        A = numpy.zeros((self.num_terms, self.num_docs))
        for term_id, term in enumerate(self.terms):
            for doc_id in self.inverted_lists[term]:
                A[term_id, doc_id - 1] += 1
        return A


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python3 inverted_index.py <file name>")
        sys.exit(1)
    file_name = sys.argv[1]

    ii = InvertedIndex()
    ii.read_from_file(file_name)
    A = ii.build_td_matrix()
    q = numpy.array([0, 1, 1, 0])
    numpy.set_printoptions(formatter={"float": lambda x: ("%2.0f" % x)})
    print()
    print("TD matrix:")
    print(A)
    print()
    print("Query:")
    print(q)
    print()
    print("Scores:")
    print(q.dot(A))
    print()
